import components.common.Generator
import sma.common.pojo.Colors
import sma.common.pojo.Position
import sma.system.agents.ecoRobot.interfaces.IExecute
import sma.system.agents.ecoRobot.interfaces.IRobotStatus
import sma.system.agents.logging.interfaces.ILog
import sma.system.environment.services.interfaces.IInteraction
import sma.system.environment.services.interfaces.IPerception

namespace components.agent.ecoRobot {

	component Perception {
		provides perceive: IExecute
		requires envPerception: IPerception
	}

	component Decision {
		provides decide: IExecute
		requires perception: IExecute
		requires action: IExecute
	}

	component Action {
		provides act: IExecute
		requires envInteraction: IInteraction
	}

	ecosystem ReusableJoiningComp {
		requires universalEnvInteraction: IInteraction
		requires universalEnvPerception: IPerception

		species JoiningEntity {
			provides joinEnvInteraction: IInteraction
			provides joinEnvPerception: IPerception
		}
	}

	ecosystem EcoRobot {

		requires envLocalInteraction: IInteraction
		requires envLocalPerception: IPerception
		requires elog: ILog

		part rjc: ReusableJoiningComp {
			bind universalEnvInteraction to envLocalInteraction
			bind universalEnvPerception to envLocalPerception
		}

		part randomGenerator: Generator

		species Robot(maxEnergy: float, robotColor: Colors, initPosition: Position)
		{
			provides execute: IExecute
			provides status: IRobotStatus
			requires log: ILog

			use je: rjc.JoiningEntity

			part perception: Perception {
				bind envPerception to je.joinEnvPerception
			}

			part decision: Decision {
				bind action to action.act
				bind perception to perception.perceive
			}

			part action: Action {
				bind envInteraction to je.joinEnvInteraction
			}
		}
	}
}