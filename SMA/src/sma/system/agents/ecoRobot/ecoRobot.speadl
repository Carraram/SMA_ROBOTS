
import sma.system.agents.ecoRobot.interfaces.IRobotOperations

import sma.system.agents.logging.interfaces.ILog

import sma.system.agents.ecoRobot.interfaces.IRobotStatus

import sma.common.pojo.Position

import sma.common.pojo.Colors

import sma.system.environment.services.interfaces.IInteraction

import sma.system.environment.services.interfaces.IPerception

import sma.system.agents.ecoRobot.interfaces.IExecute

import components.environment.Environment

import sma.system.agents.ecoRobotLogged.impl.EcoRobotLoggedImpl

import sma.common.services.interfaces.IGeneration

import components.common.Generator

namespace components.agent.ecoRobot {

	component Perception {
		provides perceive: IExecute
		requires envPerception: IPerception
	}

	component Decision {
		provides decide: IExecute
		requires perception: IExecute
		requires action: IExecute
	}

	component Action {
		provides act: IExecute
		requires envInteraction: IInteraction
	}

	component UniversalProvider {
		provides env: Environment
	}

	ecosystem ReusableJoiningComp {
		requires universalEnvInteraction: IInteraction
		requires universalEnvPerception: IPerception

		species JoiningEntity {
			provides joinEnvInteraction: IInteraction
			provides joinEnvPerception: IPerception
		}
	}

	ecosystem EcoRobot {

		requires envLocalInteraction: IInteraction
		requires envLocalPerception: IPerception

		//		part envProvider: UniversalProvider
		part rjc: ReusableJoiningComp {
		//			bind universalEnv to envLocal
			bind universalEnvInteraction to envLocalInteraction
			bind universalEnvPerception to envLocalPerception

		}

		requires elog: ILog

			part randomGenerator: Generator


		species Robot(maxEnergy: float, robotColor: Colors, initPosition: Position)
		{

			use je: rjc.JoiningEntity

			//			provides operations: IRobotOperations
			provides status: IRobotStatus

			requires log: ILog

			part perception: Perception {
				bind envPerception to je.joinEnvPerception
			}

			part decision: Decision {
				bind action to action.act
				bind perception to perception.perceive
			}

			part action: Action {
				bind envInteraction to je.joinEnvInteraction
			}

			provides execute: IExecute

		}
	}
}